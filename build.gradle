import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java-library'
    id 'org.openjfx.javafxplugin' version "$jfxPlugin"
    id 'com.vanniktech.maven.publish' version "$mavenPublishPlugin"
}

group = 'io.github.palexdev'
version = "$ver"

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.github.palexdev:directory-watcher:$directoryWatcher"
    implementation "org.jooq:joor:$joor"
    implementation "org.tinylog:tinylog-impl:$tinylog"

    testImplementation "io.github.palexdev:mfxcore:24.2.0"
    testImplementation "io.github.palexdev:mfxresources:24.2.0"
    testImplementation ("io.github.palexdev:virtualizedfx:24.2.3") {
        exclude group: "io.github.palexdev"
    }
    testImplementation "io.github.palexdev:imcache:21.4.0"

    testImplementation platform("org.junit:junit-bom:$junit")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

}

java {
    sourceCompatibility = "$jdk"
    targetCompatibility = "$jdk"
    withSourcesJar()
    withJavadocJar()
    tasks.withType(Jar).each { it.archiveBaseName.set("hotswapfx") }
}

javafx {
    version = "$jfx"
    modules = ['javafx.graphics']
    configurations = ["compileOnly", "testImplementation"]
}

test {
    useJUnitPlatform()
}

tasks.register("showcase", JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set(provider {
        return "apps.weather.WeatherApp"
    })
}

configurations {
    // Remove vanniktech nonsense
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(mavenPlainJavadocJar)) {
            mavenPlainJavadocJar.enabled = false
        }
    }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()
}
